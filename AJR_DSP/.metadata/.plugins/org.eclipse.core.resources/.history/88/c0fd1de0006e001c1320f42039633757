/*
 * sdram.c
 *
 *  Created on: 2020年9月12日
 *      Author: liaot
 */

#include "sdram.h"
#include "reg_can.h"
#include "reg_mibspi.h"
/**************************************
 * void Sdram_Init(void)
 * 与FPGA通信的初始化
 * ************************************/
void Sdram_Init(void)
{
    hetPORT1->DIR &= (~ 0x0555DC00);    /*INPUT--DATA:10-12 14-16 18 20 22 24 26*/
    hetPORT1->DIR |= 0x500003BF;        /*OUTPUT--ADDR:0-5  7-9 28 30*/
    gioPORTA->DIR &= (~ 0X000000E4);    /*INPUT--DATA:2 5 6 7*/
    canREG2->TIOC &=(~0x00000008);      /*can2_tx as i/o  to ADDR_A6*/
    canREG2->TIOC |= 0x00000004;        /*can2_tx output*/
    canREG2->RIOC &=(~0x0000000C);      /*can2_Rx as i/o  to DATA_A12   INPUT*/
    mibspiREG5->PC0 &=(~0x00000200);    /*mbspi_clkx as i/o  to clk*/
    mibspiREG5->PC1 |=0x00000200;       /*mbspi_clkx output*/
    mibspiREG5->PC0 &=(~0x00000001);    /*mbspi_cS as i/o  to cS*/
    mibspiREG5->PC1 |=(0x00000001);     /*mbspi_CS output*/
}
/**************************************
 * void SDRAM_Set_IO_To_Read_Mode(void)
 * 将SDRAM的IO设置为读模式
 * ************************************/
void SDRAM_Set_IO_To_Read_Mode(void)
{
    /*置1输出。   将IO扣配置为读取来自PFGA数据的模式*/
    hetPORT1->DIR &= (~ 0x0555DC00);    /*INPUT--DATA:10-12 14-16 18 20 22 24 26*/
    hetPORT1->DIR |= 0x500003BF;        /*OUTPUT--ADDR:0-5  7-9 28 30*/
    gioPORTA->DIR &= (~ 0X000000E4);    /*INPUT--DATA:2 5 6 7*/
    canREG2->TIOC &=(~0x00000008);      /*can2_tx as i/o  to ADDR_A6*/
    canREG2->TIOC |= 0x00000004;        /*can2_tx output*/
    canREG2->RIOC &=(~0x0000000C);      /*can2_Rx as i/o  to DATA_A12   INPUT*/
    mibspiREG5->PC0 &=(~0x00000200);    /*mbspi_clkx as i/o  to clk*/
    mibspiREG5->PC1 |=0x00000200;       /*mbspi_clkx output*/
    mibspiREG5->PC0 &=(~0x00000001);    /*mbspi_cS as i/o  to cS*/
    mibspiREG5->PC1 |=(0x00000001);     /*mbspi_CS output*/
}
/**************************************
 * uint8_t SDRAM_Read_Data( uint8_t Addr,uint16_t *Read_data)
 * 从FPGA指定地址读取数据
 * ************************************/
uint8_t SDRAM_Read_Data( uint8_t Addr,uint16_t *Read_data)
{
    uint16_t reData=0;
    /*SET-ADDR*/
    gioSetBit(hetPORT1,PIN_HET_0,GetBit(Addr,0));   /*[A0]*/
    gioSetBit(hetPORT1,PIN_HET_1,GetBit(Addr,1));   /*[A1]*/
    gioSetBit(hetPORT1,PIN_HET_2,GetBit(Addr,2));   /*[A2]*/
    gioSetBit(hetPORT1,PIN_HET_3,GetBit(Addr,3));   /*[A3]*/
    gioSetBit(hetPORT1,PIN_HET_4,GetBit(Addr,4));   /*[A4]*/
    gioSetBit(hetPORT1,PIN_HET_5,GetBit(Addr,5));   /*[A5]*/
    can2_tx_SetBit(GetBit(Addr,6));                 /*[A6]*/
    gioSetBit(hetPORT1,PIN_HET_7,GetBit(Addr,7));   /*[A7]*/
    gioSetBit(hetPORT1,PIN_HET_8,GetBit(Addr,8));   /*[A8]*/
    gioSetBit(hetPORT1,PIN_HET_9,GetBit(Addr,9));   /*[A9]*/
    gioSetBit(hetPORT1,PIN_HET_28,1);               /* 地址有效位，置1，地址有效*/
    set_sdram_cs(1);                                /*片选信号，置1，FPGA开始将数据放到数据线上*/
    /*GET-DATA*/
    uint16_t data[16]={0};
    uint16_t i=0;
    /*读取数据线数据*/
    data[0]=gioGetBit(gioPORTA, 2)>>0?1:0;
    data[1]=gioGetBit(gioPORTA, 5)>>0?1:0;
    data[2]=gioGetBit(gioPORTA, 6)>>0?1:0;
    data[3]=gioGetBit(gioPORTA, 7)>>0?1:0;
    data[4]=gioGetBit(hetPORT1, 26)>>0?1:0;
    data[5]=gioGetBit(hetPORT1, 24)>>0?1:0;
    data[6]=gioGetBit(hetPORT1, 22)>>0?1:0;
    data[7]=gioGetBit(hetPORT1, 20)>>0?1:0;
    data[8]=gioGetBit(hetPORT1, 18)>>0?1:0;
    data[9]=gioGetBit(hetPORT1, 16)>>0?1:0;
    data[10]=gioGetBit(hetPORT1, 15)>>0?1:0;
    data[11]=gioGetBit(hetPORT1, 14)>>0?1:0;
    data[12]=get_sdram_DATA_A12()>>0?1:0;
    data[13]=gioGetBit(hetPORT1, 12)>>0?1:0;
    data[14]=gioGetBit(hetPORT1, 11)>>0?1:0;
    data[15]=gioGetBit(hetPORT1, 10)>>0?1:0;
    for(i=0;i<16;i++)
    {
        reData |=  data[i]<<i;
    }
    set_sdram_cs(0);                    /*片选信号，置0*/
    gioSetBit(hetPORT1,PIN_HET_28,0);   /* 地址有效位，置0，地址无效*/
    *Read_data = (uint16_t)reData;
    return 1;
}

/**************************************
 * void SDRAM_Read(void)
 * 从FPGA读取所有数据
 * ************************************/
void SDRAM_Read(void)
{

}
/**************************************
 * void SDRAM_Set_IO_To_Write_Mode(void)
 * 将SDRAM的IO设置为写模式
 * ************************************/
void SDRAM_Set_IO_To_Write_Mode(void)
{
      /*置1输出。将IO扣配置为发送数据到PFGA的模式*/
      hetPORT1->DIR |=  0x0555DC00;      /*0NPUT--DATA:10-12 14-16 18 20 22 24 26*/
      hetPORT1->DIR |= 0x500003BF;       /*OUTPUT--ADDR:0-5  7-9 28 30*/
      gioPORTA->DIR |=  0X000000E4;      /*0NPUT--DATA:2 5 6 7*/
      canREG2->TIOC &=(~0x00000008);     /*can2_tx as i/o  to ADDR_A6*/
      canREG2->TIOC |= 0x00000004;       /*can2_tx output*/
      canREG2->RIOC &=(~0x00000008);     /*can2_Rx as i/o  to DATA_A12*/
      canREG2->RIOC |=0x00000004;        /*can2_Rx  0NPUT*/
      mibspiREG5->PC0 &=(~0x00000200);   /*mbspi_clkx as i/o  to clk*/
      mibspiREG5->PC1 |=0x00000200;      /*mbspi_clkx output*/
}
/**************************************
 * void SDRAM_Write_Data(uint8_t Addr, uint16_t Data)
 * 发送数据到FPGA指定地址
 * ************************************/
void SDRAM_Write_Data(uint8_t Addr, uint16_t Data)
{
    gioSetBit(hetPORT1,PIN_HET_0,GetBit(Addr,0));   /*[A0]*/
    gioSetBit(hetPORT1,PIN_HET_1,GetBit(Addr,1));   /*[A1]*/
    gioSetBit(hetPORT1,PIN_HET_2,GetBit(Addr,2));   /*[A2]*/
    gioSetBit(hetPORT1,PIN_HET_3,GetBit(Addr,3));   /*[A3]*/
    gioSetBit(hetPORT1,PIN_HET_4,GetBit(Addr,4));   /*[A4]*/
    gioSetBit(hetPORT1,PIN_HET_5,GetBit(Addr,5));   /*[A5]*/
    can2_tx_SetBit(GetBit(Addr,6));                 /*[A6]*/
    gioSetBit(hetPORT1,PIN_HET_7,GetBit(Addr,7));   /*[A7]*/
    gioSetBit(hetPORT1,PIN_HET_8,GetBit(Addr,8));   /*[A8]*/
    gioSetBit(hetPORT1,PIN_HET_9,GetBit(Addr,9));   /*[A9]*/
    /*SET-DATA*/
    /*DSP往数据线上写数据*/
    gioSetBit(gioPORTA,2,GetBit(Data,0));           /*[D0]*/
    gioSetBit(gioPORTA,5,GetBit(Data,1));           /*[D1]*/
    gioSetBit(gioPORTA,6,GetBit(Data,2));           /*[D2]*/
    gioSetBit(gioPORTA,7,GetBit(Data,3));           /*[D3]*/
    gioSetBit(hetPORT1,PIN_HET_26,GetBit(Data,4));  /*[D4]*/
    gioSetBit(hetPORT1,PIN_HET_24,GetBit(Data,5));  /*[D5]*/
    gioSetBit(hetPORT1,PIN_HET_22,GetBit(Data,6));  /*[D6]*/
    gioSetBit(hetPORT1,PIN_HET_20,GetBit(Data,7));  /*[D7]*/
    gioSetBit(hetPORT1,PIN_HET_18,GetBit(Data,8));  /*[D8]*/
    gioSetBit(hetPORT1,PIN_HET_16,GetBit(Data,9));  /*[D9]*/
    gioSetBit(hetPORT1,PIN_HET_15,GetBit(Data,10)); /*[D10]*/
    gioSetBit(hetPORT1,PIN_HET_14,GetBit(Data,11)); /*[D11]*/
    set_sdram_DATA_A12(GetBit(Data,12));            /*[D12]*/
    gioSetBit(hetPORT1,PIN_HET_12,GetBit(Data,13)); /*[D13]*/
    gioSetBit(hetPORT1,PIN_HET_11,GetBit(Data,14)); /*[D14]*/
    gioSetBit(hetPORT1,PIN_HET_10,GetBit(Data,15)); /*[D15]*/
    gioSetBit(hetPORT1,PIN_HET_28,1);               /*  地址有效位，置1，地址有效*/
    set_sdram_cs(0);                                /*片选信号，置0，FPGA开始读取数据线上的数据*/
    delay_us(5);                                    /*延时，等待FPGA读取数据线上的数据。*/
    gioSetBit(hetPORT1,PIN_HET_28,0);               /* 地址有效位，置0，地址无效*/
    set_sdram_cs(1);                                /*片选信号，置1*/

}
/**************************************
 * void SDRAM_Write(void)
 * 发送所有数据到FPGA
 * ************************************/
void SDRAM_Write(void)
{

}

/*********************************
 * uint8_t GetBit(int data, int index)
 * 得到数据第n位的值
 * ********************************/
uint8_t GetBit(int data, int index)
{
    return ((data & (1 << index)) > 0) ? 1: 0;
}
/***************************
 *void set_sdram_clk(uint8_t statue)
 * 设置Clk信号
 * statue：信号高低状态
 * **************************/
uint8_t PrityGet(uint16_t data)
{
    uint8_t prity = 0;
    uint8_t i,num;
    num = 0;
    for(i=0;i<16;i++)
    {
        if((1<<i) & data)
            num++;
    }
    if(num%2)
        prity = 1;
    else
        prity = 0;
    return prity;
}

/***************************
 * void set_sdram_cs(uint8_t statue)
 * 设置CS信号
 * statue：信号高低状态
 * **************************/
void set_sdram_clk(uint8_t statue)
{
    if(statue==1)
    {
        mibspiREG3->PC3 |=0x00000200;
    }
    else
    {
        mibspiREG3->PC3 &=(~0x00000200);
    }
}
/***************************
 * uint16_t get_sdram_DATA_A12( void)
 * 获取数据线 12信号状态
 * 返回：信号高低状态
 * **************************/
void set_sdram_cs(uint8_t statue)
{
    if(statue==1)
    {
        mibspiREG5->PC3 |=0x00000001;
    }
    else
    {
        mibspiREG5->PC3 &=(~0x00000001);
    }
}
/***************************
 * uint16_t get_sdram_DATA_A12( void)
 * 获取数据线 12信号状态
 * 返回：信号高低状态
 * **************************/
uint16_t get_sdram_DATA_A12( void)
{
   uint16_t recv=0;
   recv=(uint16_t)((canREG2->RIOC) &0x00000001);
   return recv;
}

/***************************
 * void set_sdram_DATA_A12(uint8_t statue)
 * 设置数据线 12信号
 * statue：信号高低状态
 * **************************/
void set_sdram_DATA_A12(uint8_t statue)
{
    if(statue==0)
    {
       canREG2->RIOC &=(~0x00000002);
    }
    else
    {
        canREG2->RIOC |=0x00000002;
    }
}
/***************************
 * void can2_tx_SetBit(uint8_t statue)
 * 设置CAN2 Tx信号
 * statue：信号高低状态
 * **************************/
void can2_tx_SetBit(uint8_t statue)
{
   if(statue==0)
    {
       canREG2->TIOC &=(~0x00000002);
    }
    else
    {
        canREG2->TIOC |=0x00000002;
    }
}
/***************************
 * void set_SOV(uint8_t statue)
 * 设置SOV信号
 * statue：信号高低状态
 * **************************/
void set_SOV(uint8_t statue)
{
   if(statue==0)
    {
       canREG1->TIOC &=(~0x00000002);
    }
    else
    {
        canREG1->TIOC |=0x00000002;
    }
}
/***************************
 * void set_SOL(uint8_t statue)
 * 设置ABSW信号
 * statue：信号高低状态
 * **************************/
void set_SOL(uint8_t statue)
{
   if(statue==0)
    {
       canREG3->TIOC &=(~0x00000002);
    }
    else
    {
        canREG3->TIOC |=0x00000002;
    }
}
