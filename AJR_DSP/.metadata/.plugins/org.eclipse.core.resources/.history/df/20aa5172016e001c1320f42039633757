/*
 * sdram.c
 *
 *  Created on: 2020年9月12日
 *      Author: liaot
 */

#include "sdram.h"
#include "reg_can.h"
#include "reg_mibspi.h"
/**************************************
 * void Sdram_Init(void)
 * 与FPGA通信的初始化
 * ************************************/
void Sdram_Init(void)
{
    hetPORT1->DIR &= (~ 0x0555DC00);    /*INPUT--DATA:10-12 14-16 18 20 22 24 26*/
    hetPORT1->DIR |= 0x500003BF;        /*OUTPUT--ADDR:0-5  7-9 28 30*/
    gioPORTA->DIR &= (~ 0X000000E4);    /*INPUT--DATA:2 5 6 7*/
    canREG2->TIOC &=(~0x00000008);      /*can2_tx as i/o  to ADDR_A6*/
    canREG2->TIOC |= 0x00000004;        /*can2_tx output*/
    canREG2->RIOC &=(~0x0000000C);      /*can2_Rx as i/o  to DATA_A12   INPUT*/
    mibspiREG5->PC0 &=(~0x00000200);    /*mbspi_clkx as i/o  to clk*/
    mibspiREG5->PC1 |=0x00000200;       /*mbspi_clkx output*/
    mibspiREG5->PC0 &=(~0x00000001);    /*mbspi_cS as i/o  to cS*/
    mibspiREG5->PC1 |=(0x00000001);     /*mbspi_CS output*/
}
/**************************************
 * void SDRAM_Set_IO_To_Read_Mode(void)
 * 将SDRAM的IO设置为读模式
 * ************************************/
void SDRAM_Set_IO_To_Read_Mode(void)
{
    /*置1输出。   将IO扣配置为读取来自PFGA数据的模式*/
    hetPORT1->DIR &= (~ 0x0555DC00);    /*INPUT--DATA:10-12 14-16 18 20 22 24 26*/
    hetPORT1->DIR |= 0x500003BF;        /*OUTPUT--ADDR:0-5  7-9 28 30*/
    gioPORTA->DIR &= (~ 0X000000E4);    /*INPUT--DATA:2 5 6 7*/
    canREG2->TIOC &=(~0x00000008);      /*can2_tx as i/o  to ADDR_A6*/
    canREG2->TIOC |= 0x00000004;        /*can2_tx output*/
    canREG2->RIOC &=(~0x0000000C);      /*can2_Rx as i/o  to DATA_A12   INPUT*/
    mibspiREG5->PC0 &=(~0x00000200);    /*mbspi_clkx as i/o  to clk*/
    mibspiREG5->PC1 |=0x00000200;       /*mbspi_clkx output*/
    mibspiREG5->PC0 &=(~0x00000001);    /*mbspi_cS as i/o  to cS*/
    mibspiREG5->PC1 |=(0x00000001);     /*mbspi_CS output*/
}
/**************************************
 * uint8_t SDRAM_Read_Data( uint8_t Addr,uint16_t *Read_data)
 * 从FPGA指定地址读取数据
 * ************************************/
uint8_t SDRAM_Read_Data( uint8_t Addr,uint16_t *Read_data)
{
    uint16_t reData=0;
    /*SET-ADDR*/
    gioSetBit(hetPORT1,PIN_HET_0,GetBit(Addr,0));   /*[A0]*/
    gioSetBit(hetPORT1,PIN_HET_1,GetBit(Addr,1));   /*[A1]*/
    gioSetBit(hetPORT1,PIN_HET_2,GetBit(Addr,2));   /*[A2]*/
    gioSetBit(hetPORT1,PIN_HET_3,GetBit(Addr,3));   /*[A3]*/
    gioSetBit(hetPORT1,PIN_HET_4,GetBit(Addr,4));   /*[A4]*/
    gioSetBit(hetPORT1,PIN_HET_5,GetBit(Addr,5));   /*[A5]*/
    can2_tx_SetBit(GetBit(Addr,6));                 /*[A6]*/
    gioSetBit(hetPORT1,PIN_HET_7,GetBit(Addr,7));   /*[A7]*/
    gioSetBit(hetPORT1,PIN_HET_8,GetBit(Addr,8));   /*[A8]*/
    gioSetBit(hetPORT1,PIN_HET_9,GetBit(Addr,9));   /*[A9]*/
    gioSetBit(hetPORT1,PIN_HET_28,1);               /* 地址有效位，置1，地址有效*/
    set_sdram_cs(1);                                /*片选信号，置1，FPGA开始将数据放到数据线上*/
    /*GET-DATA*/
    uint16_t data[16]={0};
    uint16_t i=0;
    /*读取数据线数据*/
    data[0]=gioGetBit(gioPORTA, 2)>>0?1:0;
    data[1]=gioGetBit(gioPORTA, 5)>>0?1:0;
    data[2]=gioGetBit(gioPORTA, 6)>>0?1:0;
    data[3]=gioGetBit(gioPORTA, 7)>>0?1:0;
    data[4]=gioGetBit(hetPORT1, 26)>>0?1:0;
    data[5]=gioGetBit(hetPORT1, 24)>>0?1:0;
    data[6]=gioGetBit(hetPORT1, 22)>>0?1:0;
    data[7]=gioGetBit(hetPORT1, 20)>>0?1:0;
    data[8]=gioGetBit(hetPORT1, 18)>>0?1:0;
    data[9]=gioGetBit(hetPORT1, 16)>>0?1:0;
    data[10]=gioGetBit(hetPORT1, 15)>>0?1:0;
    data[11]=gioGetBit(hetPORT1, 14)>>0?1:0;
    data[12]=get_sdram_DATA_A12()>>0?1:0;
    data[13]=gioGetBit(hetPORT1, 12)>>0?1:0;
    data[14]=gioGetBit(hetPORT1, 11)>>0?1:0;
    data[15]=gioGetBit(hetPORT1, 10)>>0?1:0;
    for(i=0;i<16;i++)
    {
        reData |=  data[i]<<i;
    }
    set_sdram_cs(0);                    /*片选信号，置0*/
    gioSetBit(hetPORT1,PIN_HET_28,0);   /* 地址有效位，置0，地址无效*/
    *Read_data = (uint16_t)reData;
    return 1;
}

/**************************************
 * void SDRAM_Read(void)
 * 从FPGA读取所有数据
 * ************************************/
void SDRAM_Read(void)
{
    unsigned char i=0;
    /*读取0x01--0x1b的数据*/
    for(i=0;i<0x1b;i++)
    {
       SDRAM_Read_Data((i+1),&MCB_Receive_Data[i]);
    }
    /*读取0x20--0x2D的数据*/
    for(i=0x1f;i<0x2D;i++)
    {
      SDRAM_Read_Data((i+1),&MCB_Receive_Data[i]);
    }
    /*以下将从FPGA读取到的数据赋值给设备的状态参数*/
    Receive_Machine_Parameters.Right_Inboard_Brake_Control_Valve_Current=MCB_Receive_Data[0];
    Receive_Machine_Parameters.Left_Inboard_Brake_Control_Valve_Current=MCB_Receive_Data[1];
    Receive_Machine_Parameters.INBD_RT_BPSI=MCB_Receive_Data[2];
    Receive_Machine_Parameters.INBD_LT_BPSI=MCB_Receive_Data[3];
    Receive_Machine_Parameters.Inboard_Shutoff_Valve_Current=MCB_Receive_Data[4];
    Receive_Machine_Parameters.RightWheelSpeed.Value=MCB_Receive_Data[5];
    Receive_Machine_Parameters.LeftWheelSpeed.Value=MCB_Receive_Data[6];
    Receive_Machine_Parameters.WheelSpeed_av=(Receive_Machine_Parameters.RightWheelSpeed.Value+Receive_Machine_Parameters.LeftWheelSpeed.Value)/2;
    Receive_Machine_Parameters.INBD_RT_TEMP=MCB_Receive_Data[7];
    Receive_Machine_Parameters.INBD_LT_TEMP=MCB_Receive_Data[8];
    Receive_Machine_Parameters.RightPPedal.Value=MCB_Receive_Data[9];
    Receive_Machine_Parameters.LeftPPedal.Value=MCB_Receive_Data[10];
    Receive_Machine_Parameters.RightCptPedal.Value=MCB_Receive_Data[11];
    Receive_Machine_Parameters.LeftCptPedal.Value=MCB_Receive_Data[12];
    Receive_Machine_Parameters.AutoBRK_OFF.Value=(MCB_Receive_Data[13] >> 0) &0x01;
    Receive_Machine_Parameters.AutoBRK_LOW.Value=(MCB_Receive_Data[13] >> 1) &0x01;
    Receive_Machine_Parameters.AutoBRK_MED.Value=(MCB_Receive_Data[13] >> 2) &0x01;
    Receive_Machine_Parameters.AutoBRK_HI.Value=(MCB_Receive_Data[13] >> 3) &0x01;
    Receive_Machine_Parameters.AutoBRK_RTO.Value=(MCB_Receive_Data[13] >> 4) &0x01;
    Receive_Machine_Parameters.Inner_wheel_ABS_start_signal=(MCB_Receive_Data[13] >> 5) &0x01;
    Receive_Machine_Parameters.Parking_brake_signal=(MCB_Receive_Data[13] >> 6) &0x01;
    Receive_Machine_Parameters.SpoilerStoredSignal_Right=Receive_Machine_Parameters.SpoilerStoredSignal_Left=(MCB_Receive_Data[13] >> 8) &0x01;
    Receive_Machine_Parameters.LeftThrottleIdle=Receive_Machine_Parameters.RightThrottleIdle=(MCB_Receive_Data[13] >> 9) &0x01;
    Receive_Machine_Parameters.RightWOW=Receive_Machine_Parameters.LeftWOW=(MCB_Receive_Data[13] >> 10) &0x01;
    Receive_Machine_Parameters.LandingGearExtentionandRetractionCommand=(MCB_Receive_Data[13] >> 11) &0x01;
    Receive_Machine_Parameters.spare=(MCB_Receive_Data[13] >> 12) &0x01;
    Receive_Machine_Parameters.PIN_PGR_1=(MCB_Receive_Data[13] >> 13) &0x01;
    Receive_Machine_Parameters.PIN_PGR_2=(MCB_Receive_Data[13] >> 14) &0x01;
    Receive_Machine_Parameters.RX_429_Communication.Hydraulic_System_Pressure_1_60=MCB_Receive_Data[15];
    Receive_Machine_Parameters.RX_429_Communication.Accumulator_System_Pressure_1_126=MCB_Receive_Data[16];
    Receive_Machine_Parameters.RX_429_Communication.TLA_Position_Left_133=MCB_Receive_Data[17];
    Receive_Machine_Parameters.RX_429_Communication.TLA_Position_Right_133=MCB_Receive_Data[18];
    Receive_Machine_Parameters.RX_429_Communication.Master_Time_150=MCB_Receive_Data[19];
    Receive_Machine_Parameters.RX_429_Communication.Airspeed.Value=MCB_Receive_Data[20];
    Receive_Machine_Parameters.RX_429_Communication.Date_Master_260=MCB_Receive_Data[21];
    Receive_Machine_Parameters.RX_429_Communication.LG_GearDown_Locked=MCB_Receive_Data[22];
    Receive_Machine_Parameters.RX_429_Communication.Computed_WOW_Data_1_277=MCB_Receive_Data[23];
    Receive_Machine_Parameters.RX_429_Communication.Computed_WOW_Data_2_277=MCB_Receive_Data[24];
    Receive_Machine_Parameters.RX_429_Communication.AircraftAcceleration_Left.Value=MCB_Receive_Data[25];
    Receive_Machine_Parameters.RX_429_Communication.AircraftAcceleration1_Right.Value=MCB_Receive_Data[26];
}
/**************************************
 * void SDRAM_Set_IO_To_Write_Mode(void)
 * 将SDRAM的IO设置为写模式
 * ************************************/
void SDRAM_Set_IO_To_Write_Mode(void)
{
      /*置1输出。将IO扣配置为发送数据到PFGA的模式*/
      hetPORT1->DIR |=  0x0555DC00;      /*0NPUT--DATA:10-12 14-16 18 20 22 24 26*/
      hetPORT1->DIR |= 0x500003BF;       /*OUTPUT--ADDR:0-5  7-9 28 30*/
      gioPORTA->DIR |=  0X000000E4;      /*0NPUT--DATA:2 5 6 7*/
      canREG2->TIOC &=(~0x00000008);     /*can2_tx as i/o  to ADDR_A6*/
      canREG2->TIOC |= 0x00000004;       /*can2_tx output*/
      canREG2->RIOC &=(~0x00000008);     /*can2_Rx as i/o  to DATA_A12*/
      canREG2->RIOC |=0x00000004;        /*can2_Rx  0NPUT*/
      mibspiREG5->PC0 &=(~0x00000200);   /*mbspi_clkx as i/o  to clk*/
      mibspiREG5->PC1 |=0x00000200;      /*mbspi_clkx output*/
}
/**************************************
 * void SDRAM_Write_Data(uint8_t Addr, uint16_t Data)
 * 发送数据到FPGA指定地址
 * ************************************/
void SDRAM_Write_Data(uint8_t Addr, uint16_t Data)
{
    gioSetBit(hetPORT1,PIN_HET_0,GetBit(Addr,0));   /*[A0]*/
    gioSetBit(hetPORT1,PIN_HET_1,GetBit(Addr,1));   /*[A1]*/
    gioSetBit(hetPORT1,PIN_HET_2,GetBit(Addr,2));   /*[A2]*/
    gioSetBit(hetPORT1,PIN_HET_3,GetBit(Addr,3));   /*[A3]*/
    gioSetBit(hetPORT1,PIN_HET_4,GetBit(Addr,4));   /*[A4]*/
    gioSetBit(hetPORT1,PIN_HET_5,GetBit(Addr,5));   /*[A5]*/
    can2_tx_SetBit(GetBit(Addr,6));                 /*[A6]*/
    gioSetBit(hetPORT1,PIN_HET_7,GetBit(Addr,7));   /*[A7]*/
    gioSetBit(hetPORT1,PIN_HET_8,GetBit(Addr,8));   /*[A8]*/
    gioSetBit(hetPORT1,PIN_HET_9,GetBit(Addr,9));   /*[A9]*/
    /*SET-DATA*/
    /*DSP往数据线上写数据*/
    gioSetBit(gioPORTA,2,GetBit(Data,0));           /*[D0]*/
    gioSetBit(gioPORTA,5,GetBit(Data,1));           /*[D1]*/
    gioSetBit(gioPORTA,6,GetBit(Data,2));           /*[D2]*/
    gioSetBit(gioPORTA,7,GetBit(Data,3));           /*[D3]*/
    gioSetBit(hetPORT1,PIN_HET_26,GetBit(Data,4));  /*[D4]*/
    gioSetBit(hetPORT1,PIN_HET_24,GetBit(Data,5));  /*[D5]*/
    gioSetBit(hetPORT1,PIN_HET_22,GetBit(Data,6));  /*[D6]*/
    gioSetBit(hetPORT1,PIN_HET_20,GetBit(Data,7));  /*[D7]*/
    gioSetBit(hetPORT1,PIN_HET_18,GetBit(Data,8));  /*[D8]*/
    gioSetBit(hetPORT1,PIN_HET_16,GetBit(Data,9));  /*[D9]*/
    gioSetBit(hetPORT1,PIN_HET_15,GetBit(Data,10)); /*[D10]*/
    gioSetBit(hetPORT1,PIN_HET_14,GetBit(Data,11)); /*[D11]*/
    set_sdram_DATA_A12(GetBit(Data,12));            /*[D12]*/
    gioSetBit(hetPORT1,PIN_HET_12,GetBit(Data,13)); /*[D13]*/
    gioSetBit(hetPORT1,PIN_HET_11,GetBit(Data,14)); /*[D14]*/
    gioSetBit(hetPORT1,PIN_HET_10,GetBit(Data,15)); /*[D15]*/
    gioSetBit(hetPORT1,PIN_HET_28,1);               /*  地址有效位，置1，地址有效*/
    set_sdram_cs(0);                                /*片选信号，置0，FPGA开始读取数据线上的数据*/
    delay_us(5);                                    /*延时，等待FPGA读取数据线上的数据。*/
    gioSetBit(hetPORT1,PIN_HET_28,0);               /* 地址有效位，置0，地址无效*/
    set_sdram_cs(1);                                /*片选信号，置1*/

}
/**************************************
 * void SDRAM_Write(void)
 * 发送所有数据到FPGA
 * ************************************/
void SDRAM_Write(void)
{
    unsigned char i=0;
      /*将控制设备的参数赋给发送到FPGA的数据*/
      MCB_Trismit_Data[0]=Transmit_Machine_Parameters.TX_429_Communication.Left_Inboard_Wheel_Speed_006;
      MCB_Trismit_Data[1]=Transmit_Machine_Parameters.TX_429_Communication.Right_Inboard_Wheel_Speed_007;
      MCB_Trismit_Data[2]=Transmit_Machine_Parameters.TX_429_Communication.Left_Inboard_Brake_Control_Valve_Current_051;
      MCB_Trismit_Data[3]=Transmit_Machine_Parameters.TX_429_Communication.Right_Inboard_Brake_Control_Valve_Current_052;
      MCB_Trismit_Data[4]=Transmit_Machine_Parameters.TX_429_Communication.Left_Inboard_Brake_Pressure_070;
      MCB_Trismit_Data[5]=Transmit_Machine_Parameters.TX_429_Communication.Right_Inboard_Brake_Pressure_071;
      MCB_Trismit_Data[6]=Transmit_Machine_Parameters.TX_429_Communication.Inboard_Shutoff_Valve_Current_113;
      MCB_Trismit_Data[7]=Transmit_Machine_Parameters.TX_429_Communication.Left_Inboard_Brake_Temperature_114;
      MCB_Trismit_Data[8]=Transmit_Machine_Parameters.TX_429_Communication.Right_Inboard_Brake_Temperature_116;
      MCB_Trismit_Data[9]=Transmit_Machine_Parameters.TX_429_Communication.Left_Brake_Pedal_Position_Pilot_171;
      MCB_Trismit_Data[10]=Transmit_Machine_Parameters.TX_429_Communication.Right_Brake_Pedal_Position_Pilot_172;
      MCB_Trismit_Data[11]=Transmit_Machine_Parameters.TX_429_Communication.Left_Brake_Pedal_Position_Copilot_173;
      MCB_Trismit_Data[12]=Transmit_Machine_Parameters.TX_429_Communication.Right_Brake_Pedal_Position_Copilot_174;
      MCB_Trismit_Data[13]=Transmit_Machine_Parameters.TX_429_Communication.Warning_270;
      MCB_Trismit_Data[14]=Transmit_Machine_Parameters.TX_429_Communication.Status_Word_1__271;
      MCB_Trismit_Data[15]=Transmit_Machine_Parameters.TX_429_Communication.Status_Word_2_272;
      MCB_Trismit_Data[16]=Transmit_Machine_Parameters.TX_429_Communication.BCU_Aircraft_Reference_Speed_302;
      MCB_Trismit_Data[17]=Transmit_Machine_Parameters.TX_429_Communication.Failure_Word_1_350;
      MCB_Trismit_Data[18]=Transmit_Machine_Parameters.TX_429_Communication.Failure_Word_1_351;
      MCB_Trismit_Data[19]=Transmit_Machine_Parameters.TX_429_Communication.Failure_Word_1_352;
      MCB_Trismit_Data[20]=Transmit_Machine_Parameters.TX_429_Communication.Failure_Word_1_353;
      MCB_Trismit_Data[21]=Transmit_Machine_Parameters.ARM_SIG | (Transmit_Machine_Parameters.INBD_LT_SPINUP << 1) | (Transmit_Machine_Parameters.INBD_RT_SPINUP << 2);
      MCB_Trismit_Data[22]=Transmit_Machine_Parameters.Pressure_signal_LT;
      MCB_Trismit_Data[23]=Transmit_Machine_Parameters.Pressure_signal_RT;
      MCB_Trismit_Data[24]=Transmit_Machine_Parameters.BrakePressureCommand_L;
      MCB_Trismit_Data[25]=Transmit_Machine_Parameters.BrakePressureCommand_R;
      MCB_Trismit_Data[26]=Transmit_Machine_Parameters.Inner_wheel_speed_LT;
      MCB_Trismit_Data[27]=Transmit_Machine_Parameters.Inner_wheel_speed_RT;
      MCB_Trismit_Data[28]=Transmit_Machine_Parameters.SOV_Open;
      MCB_Trismit_Data[29]=Transmit_Machine_Parameters.BRK_PDL_CH1_PLT_LT_pedal_signal;
      MCB_Trismit_Data[30]=Transmit_Machine_Parameters.BRK_PDL_CH1_PLT_RT_pedal_signal;
      MCB_Trismit_Data[31]=Transmit_Machine_Parameters.BRK_PDL_CH1_CPLT_LT_pedal_signal;
      MCB_Trismit_Data[32]=Transmit_Machine_Parameters.BRK_PDL_CH1_CPLT_RT_pedal_signal;
      /*发送地址0x40--0x60的数据*/
      set_sdram_cs(1);
      for(i=0;i<0x21;i++)
     {
        SDRAM_Write_Data(0x40+i,MCB_Trismit_Data[i]);
     }
}

/*********************************
 * uint8_t GetBit(int data, int index)
 * 得到数据第n位的值
 * ********************************/
uint8_t GetBit(int data, int index)
{
    return ((data & (1 << index)) > 0) ? 1: 0;
}
/***************************
 *void set_sdram_clk(uint8_t statue)
 * 设置Clk信号
 * statue：信号高低状态
 * **************************/
uint8_t PrityGet(uint16_t data)
{
    uint8_t prity = 0;
    uint8_t i,num;
    num = 0;
    for(i=0;i<16;i++)
    {
        if((1<<i) & data)
            num++;
    }
    if(num%2)
        prity = 1;
    else
        prity = 0;
    return prity;
}

/***************************
 * void set_sdram_cs(uint8_t statue)
 * 设置CS信号
 * statue：信号高低状态
 * **************************/
void set_sdram_clk(uint8_t statue)
{
    if(statue==1)
    {
        mibspiREG3->PC3 |=0x00000200;
    }
    else
    {
        mibspiREG3->PC3 &=(~0x00000200);
    }
}
/***************************
 * uint16_t get_sdram_DATA_A12( void)
 * 获取数据线 12信号状态
 * 返回：信号高低状态
 * **************************/
void set_sdram_cs(uint8_t statue)
{
    if(statue==1)
    {
        mibspiREG5->PC3 |=0x00000001;
    }
    else
    {
        mibspiREG5->PC3 &=(~0x00000001);
    }
}
/***************************
 * uint16_t get_sdram_DATA_A12( void)
 * 获取数据线 12信号状态
 * 返回：信号高低状态
 * **************************/
uint16_t get_sdram_DATA_A12( void)
{
   uint16_t recv=0;
   recv=(uint16_t)((canREG2->RIOC) &0x00000001);
   return recv;
}

/***************************
 * void set_sdram_DATA_A12(uint8_t statue)
 * 设置数据线 12信号
 * statue：信号高低状态
 * **************************/
void set_sdram_DATA_A12(uint8_t statue)
{
    if(statue==0)
    {
       canREG2->RIOC &=(~0x00000002);
    }
    else
    {
        canREG2->RIOC |=0x00000002;
    }
}
/***************************
 * void can2_tx_SetBit(uint8_t statue)
 * 设置CAN2 Tx信号
 * statue：信号高低状态
 * **************************/
void can2_tx_SetBit(uint8_t statue)
{
   if(statue==0)
    {
       canREG2->TIOC &=(~0x00000002);
    }
    else
    {
        canREG2->TIOC |=0x00000002;
    }
}
/***************************
 * void set_SOV(uint8_t statue)
 * 设置SOV信号
 * statue：信号高低状态
 * **************************/
void set_SOV(uint8_t statue)
{
   if(statue==0)
    {
       canREG1->TIOC &=(~0x00000002);
    }
    else
    {
        canREG1->TIOC |=0x00000002;
    }
}
/***************************
 * void set_SOL(uint8_t statue)
 * 设置ABSW信号
 * statue：信号高低状态
 * **************************/
void set_SOL(uint8_t statue)
{
   if(statue==0)
    {
       canREG3->TIOC &=(~0x00000002);
    }
    else
    {
        canREG3->TIOC |=0x00000002;
    }
}
